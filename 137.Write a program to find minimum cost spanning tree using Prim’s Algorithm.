import heapq
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = {}
    def add_edge(self, u, v, w):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append((v, w))
        self.graph[v].append((u, w))
    def prim_mst(self):
        mst_set = set()
        min_heap = [(0, 0)]  
        total_cost = 0
        while min_heap:
            weight, u = heapq.heappop(min_heap)
            if u not in mst_set:
                mst_set.add(u)
                total_cost += weight
                for v, w in self.graph.get(u, []):
                    if v not in mst_set:
                        heapq.heappush(min_heap, (w, v))
        return total_cost
g = Graph(5)
g.add_edge(0, 1, 2)
g.add_edge(0, 3, 6)
g.add_edge(1, 2, 3)
g.add_edge(1, 3, 8)
g.add_edge(1, 4, 5)
g.add_edge(2, 4, 7)
g.add_edge(3, 4, 9)
print("Minimum Cost of Spanning Tree:", g.prim_mst())
