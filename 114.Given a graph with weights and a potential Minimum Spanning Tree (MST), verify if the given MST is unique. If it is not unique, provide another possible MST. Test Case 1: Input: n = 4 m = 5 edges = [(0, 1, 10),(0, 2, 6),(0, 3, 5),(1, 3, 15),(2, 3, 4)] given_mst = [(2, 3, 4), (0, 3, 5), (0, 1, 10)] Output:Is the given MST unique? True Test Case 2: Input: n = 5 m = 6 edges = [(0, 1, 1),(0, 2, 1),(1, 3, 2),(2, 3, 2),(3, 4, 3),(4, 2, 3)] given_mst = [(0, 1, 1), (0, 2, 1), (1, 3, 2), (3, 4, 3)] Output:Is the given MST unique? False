class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = []
    def add_edge(self, u, v, w):
        self.graph.append((u, v, w))
    def find_parent(self, parent, i):
        if parent[i] == i:
            return i
        return self.find_parent(parent, parent[i])
    def union(self, parent, rank, x, y):
        xroot = self.find_parent(parent, x)
        yroot = self.find_parent(parent, y)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        else:
            parent[yroot] = xroot
            rank[xroot] += 1
    def kruskal_mst(self):
        result = []
        i = 0
        e = 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []
        for node in range(self.V):
            parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            u, v, w = self.graph[i]
            i += 1
            x = self.find_parent(parent, u)
            y = self.find_parent(parent, v)
            if x != y:
                e += 1
                result.append((u, v, w))
                self.union(parent, rank, x, y)
        return result
    def is_mst_unique(self, given_mst):
        mst_edges = self.kruskal_mst()
        mst_weight = sum(w for u, v, w in mst_edges)
        given_mst_weight = sum(w for u, v, w in given_mst)
        if mst_weight != given_mst_weight:
            return False, []
        unique = True
        alternative_mst = []
        for edge in mst_edges:
            if edge not in given_mst:
                alternative_mst.append(edge)
        if len(alternative_mst) > 0:
            unique = False
        return unique, alternative_mst
n1 = 4
edges1 = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]
given_mst1 = [(2, 3, 4), (0, 3, 5), (0, 1, 10)]
graph1 = Graph(n1)
for u, v, w in edges1:
    graph1.add_edge(u, v, w)
is_unique1, alternative1 = graph1.is_mst_unique(given_mst1)
print(f"Is the given MST unique? {is_unique1}")
