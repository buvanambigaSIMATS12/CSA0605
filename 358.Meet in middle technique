from itertools import chain, combinations
def all_subsets(arr):
    return chain(*[combinations(arr, i) for i in range(len(arr) + 1)])
def meet_in_the_middle(arr, target):
    n = len(arr)
    left_part = arr[:n // 2]
    right_part = arr[n // 2:]
    left_sums = [sum(subset) for subset in all_subsets(left_part)]
    right_sums = [sum(subset) for subset in all_subsets(right_part)]
    right_sums.sort()
    for left_sum in left_sums:
        complement = target - left_sum
        low, high = 0, len(right_sums) - 1
        while low <= high:
            mid = (low + high) // 2
            if right_sums[mid] == complement:
                return True
            elif right_sums[mid] < complement:
                low = mid + 1
            else:
                high = mid - 1
    return False
if __name__ == "__main__":
    arr = [3, 34, 4, 12, 5, 2]
    target = 9
    if meet_in_the_middle(arr, target):
        print(f"There is a subset with sum {target}")
    else:
        print(f"No subset with sum {target}")
