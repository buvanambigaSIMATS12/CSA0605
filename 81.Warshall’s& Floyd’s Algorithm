def floyd_warshall(n, edges, distanceThreshold):
    dist = [[float('inf')] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0
    for u, v, w in edges:
        dist[u][v] = min(dist[u][v], w)
        dist[v][u] = min(dist[v][u], w)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
    result_city = -1
    min_reachable = float('inf')
    for i in range(n):
        reachable_count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
        if reachable_count < min_reachable or (reachable_count == min_reachable and i > result_city):
            min_reachable = reachable_count
            result_city = i
    return result_city
n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distanceThreshold = 4
output = floyd_warshall(n, edges, distanceThreshold)
print(output)  
